
Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	НужноЗаписать = Ложь;
		
	Если ЭтотОбъект.Инвентаризация.Пустая()Тогда 
		ИнвенОбъект = Документы.Инвентаризация.СоздатьДокумент();
		ИнвенОбъект.ДатаПроведенияИнвентаризации = ТекущаяДата();
		ИнвенОбъект.Записать();
		
		ЭтотОбъект.Инвентаризация = ИнвенОбъект.Ссылка;
		НужноЗаписать = Истина;
		
	КонецЕсли;
	
	Если НужноЗаписать Тогда 
		Записать();
	КонецЕсли;
	
	Сообщить("Старт бизнесс-процесса: " + """" + ЭтотОбъект.Метаданные().Синоним + """");
КонецПроцедуры

Процедура ПроведениеИнвентаризацииПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормированиеЗадачиПроведениеИнвентаризации(ФормируемыеЗадачи, СтандартнаяОбработка);
КонецПроцедуры
	  
Процедура ФормированиеЗадачиПроведениеИнвентаризации(ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		  
	Задача = Задачи.ПроверкаИнвентаря.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.БПИнвентаризация.ТочкиМаршрута.ПроведениеИнвентаризации;
	Задача.Наименование = "Проведение инвентаризации";
	Задача.Должность = Справочники.Должности.Кладовщик;
	Задача.Подразделения = Справочники.Подразделения.Склад;
	Задача.Инвентаризация = Инвентаризация;	
	Задача.ОплатаЗаПоврежденноеИмущество = ОплатаЗаПоврежденноеИмущество;
	Задача.ПокупкаИнвентаря = ПокупкаИнвентаря;
	Задача.СуммаИнвентаря = Инвентаризация.СуммаДокумента;
	Задача.Записать();
	
	ФормируемыеЗадачи.Добавить(Задача); 

КонецПроцедуры


Процедура Условие1ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	СтандартнаяОбработка = Ложь;
	СуммаДокумента = Инвентаризация.СуммаДокумента;
	Если Инвентаризация.ОбнаруженыНесоответствия Тогда
		 Результат = Истина;
		 Сообщить("Найдено несоответствие!");
	Иначе
		 Результат = Ложь;
		 Сообщить("Все хорошо, несоответсвий не найдено.");
	КонецЕсли;
КонецПроцедуры


Процедура ОпределениеСтудентаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормированиеЗадачиОпределениеСтудента(ФормируемыеЗадачи, СтандартнаяОбработка);
КонецПроцедуры

Процедура ФормированиеЗадачиОпределениеСтудента(ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		  
	Задача = Задачи.ПроверкаИнвентаря.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.БПИнвентаризация.ТочкиМаршрута.ОпределениеСтудента;
	Задача.Наименование = "Определение студента";
	Задача.Должность = Справочники.Должности.Бухгалтер;
	Задача.Подразделения = Справочники.Подразделения.Бухгалтерия;
	Задача.Инвентаризация = Инвентаризация;	
	Задача.ОплатаЗаПоврежденноеИмущество = ОплатаЗаПоврежденноеИмущество;
	Задача.ПокупкаИнвентаря = ПокупкаИнвентаря;
	Задача.СуммаИнвентаря = СуммаИнвентаря;
	Задача.Студент = Инвентаризация.Студент;
	Задача.Записать();
	
	ФормируемыеЗадачи.Добавить(Задача); 

КонецПроцедуры

Процедура Условие2ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОплатаЗаПоврежденноеИмущество.ОплатаСтудентом;
КонецПроцедуры

Процедура ОплатаШтрафаЗаконнымПредставителемПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормированиеЗадачиОплатаШтрафаЗП(ФормируемыеЗадачи, СтандартнаяОбработка);
КонецПроцедуры

Процедура ФормированиеЗадачиОплатаШтрафаЗП(ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		  
	Задача = Задачи.ПроверкаИнвентаря.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.БПИнвентаризация.ТочкиМаршрута.ОплатаШтрафаЗаконнымПредставителем;
	Задача.Наименование = "Оплата штрафа законным представителем";
	Задача.Должность = Справочники.Должности.Менеджер;
	Задача.Подразделения = Справочники.Подразделения.Администрация;
	Задача.Инвентаризация = Инвентаризация;	
	Задача.ОплатаЗаПоврежденноеИмущество = ОплатаЗаПоврежденноеИмущество;
	Задача.ПокупкаИнвентаря = ПокупкаИнвентаря;
	Задача.СуммаИнвентаря = СуммаИнвентаря;
	Задача.Студент = Инвентаризация.Студент;
	Задача.Платильщик = ОплатаЗаПоврежденноеИмущество.Платильщик;
	Задача.Записать();
	
	ФормируемыеЗадачи.Добавить(Задача); 

КонецПроцедуры

Процедура ОплатаШтрафаСтудентомПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормированиеЗадачиОплатаШтрафаСтуд(ФормируемыеЗадачи, СтандартнаяОбработка);
КонецПроцедуры

Процедура ФормированиеЗадачиОплатаШтрафаСтуд(ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		  
	Задача = Задачи.ПроверкаИнвентаря.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.БПИнвентаризация.ТочкиМаршрута.ОплатаШтрафаЗаконнымПредставителем;
	Задача.Наименование = "Оплата штрафа студентом";
	Задача.Должность = Справочники.Должности.Менеджер;
	Задача.Подразделения = Справочники.Подразделения.Администрация;
	Задача.Инвентаризация = Инвентаризация;	
	Задача.ОплатаЗаПоврежденноеИмущество = ОплатаЗаПоврежденноеИмущество;
	Задача.ПокупкаИнвентаря = ПокупкаИнвентаря;
	Задача.СуммаИнвентаря = СуммаИнвентаря;
	Задача.Студент = Инвентаризация.Студент;
	Задача.Платильщик = ОплатаЗаПоврежденноеИмущество.Платильщик;
	Задача.Записать();
	
	ФормируемыеЗадачи.Добавить(Задача); 

КонецПроцедуры

Процедура ДействиеИсполнителяОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)	
	Если КупитьИнвентарь Тогда
		Результат = ТочкаВыбораВарианта.Варианты.ЗакупитьИнвентарь;
	Иначе
		Результат = ТочкаВыбораВарианта.Варианты.ЗакончитьПроцесс;
    КонецЕсли;
КонецПроцедуры

Процедура ПокупкаИнвентаряПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормированиеЗадачиОплатаПокупкаИнвентаря(ФормируемыеЗадачи, СтандартнаяОбработка);
КонецПроцедуры

Процедура ФормированиеЗадачиОплатаПокупкаИнвентаря(ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		  
	Задача = Задачи.ПроверкаИнвентаря.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.БПИнвентаризация.ТочкиМаршрута.ПокупкаИнвентаря;
	Задача.Наименование = "Покупка инвентаря";
	Задача.Должность = Справочники.Должности.Бухгалтер;
	Задача.Подразделения = Справочники.Подразделения.Бухгалтерия;
	Задача.Инвентаризация = Инвентаризация;	
	Задача.ОплатаЗаПоврежденноеИмущество = ОплатаЗаПоврежденноеИмущество;
	Задача.ПокупкаИнвентаря = ПокупкаИнвентаря;
	Задача.СуммаИнвентаря = СуммаИнвентаря;
	Задача.Студент = Инвентаризация.Студент;
	Задача.Платильщик = ОплатаЗаПоврежденноеИмущество.Платильщик;
	Задача.Записать();
	
	ФормируемыеЗадачи.Добавить(Задача); 

КонецПроцедуры

Процедура ПроведениеИнвентаризацииПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если НЕ Инвентаризация.Проведен Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Документ-Инвентаризация не проведен ---- невозможно выполнить задачу!!!");
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры


Процедура ОплатаШтрафаЗаконнымПредставителемПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если НЕ ОплатаЗаПоврежденноеИмущество.Проведен Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщить("Документ-ОплатаЗаПоврежденноеИмущество не проведен ---- невозможно выполнить задачу!!!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


Процедура ПокупкаИнвентаряПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если НЕ ПокупкаИнвентаря.Проведен Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщить("Документ-ПокупкаИнвентаря не проведен ---- невозможно выполнить задачу!!!");
		Отказ = Истина;
	КонецЕсли
КонецПроцедуры

